//*******************************************************************************************
// Description:    Netlist for FLPv3L's Layer Controller Register File
//     Generated by genRF (Version 1.01) 08/25/2017 00:09:00
//
// [NOTE] This is a subset of the entire Register File. See Log file or MBus Register File
//         Verilog module definition for the complete list of the Register File
//*******************************************************************************************

//*******************************************************************************************
// MEMORY MAP
//*******************************************************************************************
// MBUS ADDR     || Register Name                         || Reset Value || Type || Comments 
//*******************************************************************************************
// 8'h07         || REGISTER 0x07 (  7)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h07 [12: 0] || SRAM_START_ADDR                       || 13'h0000    ||  LC  || 
//*******************************************************************************************
// 8'h08         || REGISTER 0x08 (  8)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h08 [17: 0] || FLSH_START_ADDR                       || 18'h00000   ||  LC  || 
//*******************************************************************************************
// 8'h09         || REGISTER 0x09 (  9)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h09 [18: 6] || LENGTH                                || 13'h0000    ||  LC  || 
// 8'h09 [    5] || IRQ_EN                                ||  1'h0       ||  LC  || 
// 8'h09 [ 4: 1] || CMD                                   ||  4'h0       ||  LC  || 
// 8'h09 [    0] || GO                                    ||  1'h0       ||  LC  || 
//*******************************************************************************************
// 8'h13         || REGISTER 0x13 ( 19)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h13 [19: 1] || PP_STR_LIMIT                          || 19'h00000   ||  LC  || Limit the number of words streamed. 0 means no-limit.
// 8'h13 [    0] || PP_STR_EN                             ||  1'h0       ||  LC  || Ping-Pong Straming Enable
//*******************************************************************************************
// 8'h16         || REGISTER 0x16 ( 22)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h16 [18: 0] || PP_LENGTH_STREAMED                    || 19'h00000   ||  LC  || Number of words received during Ping-Pong Streaming
//*******************************************************************************************
// 8'h17         || REGISTER 0x17 ( 23)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h17 [   23] || PP_FLAG_END_OF_FLASH                  ||  1'h0       ||  LC  || 
// 8'h17 [   22] || PP_FLAG_STR_LIMIT                     ||  1'h0       ||  LC  || 
// 8'h17 [   21] || PP_FLAG_COPY_LIMIT                    ||  1'h0       ||  LC  || 
// 8'h17 [18: 0] || PP_LENGTH_COPIED                      || 19'h00000   ||  LC  || Number of words copied to Flash during Ping-Pong Streaming
//*******************************************************************************************

module flpv3l_layer_ctrl_rf (
   //Input
    input         RESETn,
    input [ 71:0] ADDR_IN,
    input [ 23:0] DATA_IN,
   //Output
    //Register 0x07 (  7)
    output reg [12:0] SRAM_START_ADDR,
    //Register 0x08 (  8)
    output reg [17:0] FLSH_START_ADDR,
    //Register 0x09 (  9)
    output reg [12:0] LENGTH,
    output reg        IRQ_EN,
    output reg [ 3:0] CMD,
    output reg        GO,
    //Register 0x13 ( 19)
    output reg [18:0] PP_STR_LIMIT,
    output reg        PP_STR_EN,
    //Register 0x16 ( 22)
    output reg [18:0] PP_LENGTH_STREAMED,
    //Register 0x17 ( 23)
    output reg        PP_FLAG_END_OF_FLASH,
    output reg        PP_FLAG_STR_LIMIT,
    output reg        PP_FLAG_COPY_LIMIT,
    output reg [18:0] PP_LENGTH_COPIED
   );

   //****************************************************
   // REGISTER 0x07 (  7)
   //****************************************************
    //SRAM_START_ADDR (13'h0000)
    always @ (posedge ADDR_IN[7] or negedge RESETn) begin
        if (~RESETn) SRAM_START_ADDR <= `SD 13'h0000;
        else         SRAM_START_ADDR <= `SD DATA_IN[12:0];
    end

   //****************************************************
   // REGISTER 0x08 (  8)
   //****************************************************
    //FLSH_START_ADDR (18'h00000)
    always @ (posedge ADDR_IN[8] or negedge RESETn) begin
        if (~RESETn) FLSH_START_ADDR <= `SD 18'h00000;
        else         FLSH_START_ADDR <= `SD DATA_IN[17:0];
    end

   //****************************************************
   // REGISTER 0x09 (  9)
   //****************************************************
    //LENGTH (13'h0000)
    always @ (posedge ADDR_IN[9] or negedge RESETn) begin
        if (~RESETn) LENGTH <= `SD 13'h0000;
        else         LENGTH <= `SD DATA_IN[18:6];
    end

    //IRQ_EN (1'h0)
    always @ (posedge ADDR_IN[9] or negedge RESETn) begin
        if (~RESETn) IRQ_EN <= `SD 1'h0;
        else         IRQ_EN <= `SD DATA_IN[5:5];
    end

    //CMD (4'h0)
    always @ (posedge ADDR_IN[9] or negedge RESETn) begin
        if (~RESETn) CMD <= `SD 4'h0;
        else         CMD <= `SD DATA_IN[4:1];
    end

    //GO (1'h0)
    always @ (posedge ADDR_IN[9] or negedge RESETn) begin
        if (~RESETn) GO <= `SD 1'h0;
        else         GO <= `SD DATA_IN[0:0];
    end

   //****************************************************
   // REGISTER 0x13 ( 19)
   //****************************************************
    //PP_STR_LIMIT (19'h00000)
    always @ (posedge ADDR_IN[19] or negedge RESETn) begin
        if (~RESETn) PP_STR_LIMIT <= `SD 19'h00000;
        else         PP_STR_LIMIT <= `SD DATA_IN[19:1];
    end

    //PP_STR_EN (1'h0)
    always @ (posedge ADDR_IN[19] or negedge RESETn) begin
        if (~RESETn) PP_STR_EN <= `SD 1'h0;
        else         PP_STR_EN <= `SD DATA_IN[0:0];
    end

   //****************************************************
   // REGISTER 0x16 ( 22)
   //****************************************************
    //PP_LENGTH_STREAMED (19'h00000)
    always @ (posedge ADDR_IN[22] or negedge RESETn) begin
        if (~RESETn) PP_LENGTH_STREAMED <= `SD 19'h00000;
        else         PP_LENGTH_STREAMED <= `SD DATA_IN[18:0];
    end

   //****************************************************
   // REGISTER 0x17 ( 23)
   //****************************************************
    //PP_FLAG_END_OF_FLASH (1'h0)
    always @ (posedge ADDR_IN[23] or negedge RESETn) begin
        if (~RESETn) PP_FLAG_END_OF_FLASH <= `SD 1'h0;
        else         PP_FLAG_END_OF_FLASH <= `SD DATA_IN[23:23];
    end

    //PP_FLAG_STR_LIMIT (1'h0)
    always @ (posedge ADDR_IN[23] or negedge RESETn) begin
        if (~RESETn) PP_FLAG_STR_LIMIT <= `SD 1'h0;
        else         PP_FLAG_STR_LIMIT <= `SD DATA_IN[22:22];
    end

    //PP_FLAG_COPY_LIMIT (1'h0)
    always @ (posedge ADDR_IN[23] or negedge RESETn) begin
        if (~RESETn) PP_FLAG_COPY_LIMIT <= `SD 1'h0;
        else         PP_FLAG_COPY_LIMIT <= `SD DATA_IN[21:21];
    end

    //PP_LENGTH_COPIED (19'h00000)
    always @ (posedge ADDR_IN[23] or negedge RESETn) begin
        if (~RESETn) PP_LENGTH_COPIED <= `SD 19'h00000;
        else         PP_LENGTH_COPIED <= `SD DATA_IN[18:0];
    end

endmodule // flpv3l_layer_ctrl_rf
