// **********************************************************************************************
// genRF Configuration File
//-----------------------------------------------------------------------------------------------
// o Originally created by Yejoong Kim for genRF Version 1.01
// o This configuration file is supposed to be forward-compatible with future genRF versions, 
//   unless stated otherwise in genRF script.
// **********************************************************************************************

// **********************************************************************************************
// < Genearal Information >
//-----------------------------------------------------------------------------------------------
// LAYER_NAME                       Layer Name. This variable must be the first variable defined 
//                                  in this file (e.g, LAYER_NAME = PRCv12)
//
// TOP_LEVEL_SPICE_CELL_NAME        [Optional] Top Level Spice Sub-circuit Cell Name
//                                  (Default) "X" + LNAME (e.g, XPRCv12)
//
// REG_FILE_VERILOG_MODULE_NAME     [Optional] Verilog Module Name of MBus Register File
//                                  (Default) lname_rf (e.g, prcv12_rf)
//
// REG_FILE_VERILOG_INST_NAME       [Optional] Full hierarchical instance name of MBus Register File
//                                  (Default) LNAME_0.lname_rf_0 (e.g, PRCv12_0.prcv12_rf_0)
//
// LC_REG_FILE_VERILOG_MODULE_NAME  [Optional] Verilog Module Name of Layer Controller Reigster File
//                                  (Default) lname_layer_ctrl_rf (e.g, prcv12_layer_ctrl_rf)
//
// LC_REG_FILE_VERILOG_INST_NAME    [Optional] Full hierarchical instance name of Layer Controller Register File
//                                  (Default) LNAME_0.lname_layer_ctrl_rf_0 (e.g, PRCv12_0.prcv12_layer_ctrl_rf_0)
//
// REG_FILE_VERILOG_FILE_NAME       [Optional] Verilog file name for MBus Register File
//                                  (Default) ./lname_rf.v (e.g, ./prcv12_rf.v)
//
// LC_REG_FILE_VERILOG_FILE_NAME    [Optional] Verilog file name for Layer Controller Register File
//                                  (Default) ./lname_layer_ctrl_rf.v (e.g, ./prcv12_layer_ctrl_rf.v)
//
// DEBUG_FILE_NAME                  [Optional] Verilog file name for Register File monitoring
//                                  (Default) ./lname_rf_debug.v (e.g, ./prcv12_rf_debug.v)
//
// HEADER_FILE_NAME                 [Optional] C header file name for Register File struct definitions
//                                  (Default) ./LNAME_RF.h (e.g, ./PRCv12_RF.h)
//
// PT_TCL_FILE_NAME                 [Optional] PrimeTime Tcl file name for QTM generation
//                                  (Default) ./lname_rf.tcl (e.g, ./prcv12_rf.tcl)
//
// EZWAVE_TCL_FILE_NAME             [Optional] EZWAVE Tcl file for quick waveform formatting
//                                  (Default) ./EZWAVE.tcl
//
// LOG_FILE_NAME                    [Optional] Log file name
//                                  (Default) ./RegFile.log
//
// VERILOG_MISC                     [Optional] Verilog file name for useful snippets
//                                  (Default) ./Misc.v
//
// NOTE: Layer Controller Register File will be generated ONLY IF there is one or more bits whose
//       property is declared as "LC".
// **********************************************************************************************
LAYER_NAME = FLPv3L

// **********************************************************************************************
// < Verilog In-Place Editing >
//-----------------------------------------------------------------------------------------------
// - If you specify verilog file names below, genRF will automatically instantiate 
//   the Register File and modify Wire Declaration and connections to Layer Ctrl, etc.
// - If you do not want to do this, just leave the settings blank.
// - You need to put the following comments in your top-level verilog to let genRF insert 
//   the correct information in the right position.
//       Beginning of Wire Declaration:        "//---- genRF Beginning of Wire Declaration ----//"
//       End of Wire Declaration:              "//---- genRF End of Wire Declaration ----//"
//       Beginning of RF_DATA port connection: "//---- genRF Beginning of RF_DATA ----//"
//       End of RF_DATA port connection:       "//---- genRF End of RF_DATA ----//"
//       Beginning of RegFile Instantiation:   "//---- genRF Beginning of Register File ----//"
//       End of RegFile Instantiation:         "//---- genRF End of Register File ----//"
//       Beginning of Compiler Directives:     "//---- genRF Beginning of Compiler Directives ----//"
//       End of Compiler Directives:           "//---- genRF End of Compiler Directives ----//"
// **********************************************************************************************
TOP_LEVEL_VERILOG_FILE = /afs/eecs.umich.edu/vlsida/projects/m3_hdk/layer/FLP/FLPv3L/verilog/FLPv3L.v
TOP_DEF_VERILOG_FILE   = /afs/eecs.umich.edu/vlsida/projects/m3_hdk/layer/FLP/FLPv3L/verilog/FLPv3L_def.v

// **********************************************************************************************
// < Standard Cell Information >
// **********************************************************************************************

// -- Flip-Flop -- //
// ---- If it does not have an Inverted Output Pin, leave the value of FLIP_FLOP_OUTPUTB_PIN_NAME blank.
SET_FLIP_FLOP_CELL_NAME = DFFSNLLX1HVT_TSMC90
RESET_FLIP_FLOP_CELL_NAME = DFFRNLLX1HVT_TSMC90

FLIP_FLOP_CLOCK_PIN_NAME = CLK
FLIP_FLOP_DATA_PIN_NAME = D
FLIP_FLOP_OUTPUT_PIN_NAME = Q
FLIP_FLOP_OUTPUTB_PIN_NAME = QN

FLIP_FLOP_SET_PIN_NAME = SN
FLIP_FLOP_ACTIVE_LOW_SET = YES

FLIP_FLOP_RESET_PIN_NAME = RN
FLIP_FLOP_ACTIVE_LOW_RESET = YES

// -- Buffer -- //
BUF_CELL_NAME = BUFLLX4HVT_TSMC90
BUF_INPUT_PIN_NAME = A
BUF_OUTPUT_PIN_NAME = Y

// -- Inverter -- //
INVERTER_CELL_NAME = INVLLX8HVT_TSMC90
INVERTER_INPUT_PIN_NAME = A
INVERTER_OUTPUT_PIN_NAME = Y

// -- 2-Input AND -- //
AND2_CELL_NAME = AND2LLX1HVT_TSMC90
AND2_INPUT1_PIN_NAME = A
AND2_INPUT2_PIN_NAME = B
AND2_OUTPUT_PIN_NAME = Y

// **********************************************************************************************
// < Pin Connection >
//-----------------------------------------------------------------------------------------------
// USE_CUSTOM_CONNECTION    THIS_IS_PRC_LAYER       Description
//-----------------------------------------------------------------------------------------------
//          YES                 Ignored             Use net names specified in *_CONNECT_TO
//          NO                  YES                 Use Default master net names
//          NO                  NO                  Use Default member net names
// **********************************************************************************************
USE_CUSTOM_CONNECTION   = NO
THIS_IS_PRC_LAYER       = NO

// -- Custom Pin Connection; Valid only if USE_CUSTON_CONNECTION is set to YES.
// [WARNING] RESETN_CONNECT_TO, ISOLATE_CONNECT_TO, LC_RESETN_CONNECT_TO nets are NOT included in 
//           'genRF Wire Decalaration'. User has to manually declare these wires in the top-level 
//           verilog.

//---- MBus Register File
RESETN_CONNECT_TO     = 
ISOLATE_CONNECT_TO    = 
DATA_IN_CONNECT_TO    = 
ADDR_IN_CONNECT_TO    = 

//---- Layer Ctrl Register File
LC_RESETN_CONNECT_TO  =
LC_DATA_IN_CONNECT_TO = 
LC_ADDR_IN_CONNECT_TO = 

// **********************************************************************************************
// < List of Registers >
//
// Start each line with 0x.
// **********************************************************************************************
// ADDR(Hex)    BIT_INDEX   DEFAULT_VALUE(Hex)   PROPERTY(W/R or R or LC)    SIGNAL_NAME    ~INVERTED_SIGNAL_NAME(Optional)~ "COMMENT(Optional)"

// <FLPv3L>
// Flash Low-Power Large Version
//
// Timing Parameters (Default Frequency < 1MHz. Max Frequency < 10 MHz))
//
//   Time     Required    1MHz (1us)        10MHz (0.1us)    Num_Bits (Max possible Ticks)
//   T3us       > 3us        3 (0x3)           30 (0x1E)         6 (63)
//   T5us       > 5us        5 (0x5)           50 (0x32)         6 (63)
//   T10us      > 10us      10 (0xA)          100 (0x64)         7 (127)
//   Tvref      > 8ms     8000 (0x1F40)     80000 (0x13880)     17 (131071)
//   Tprog      > 10us      10 (0xA)          100 (0x64)         8 (255)
//   Terase     > 256us    256 (0x0100)      2560 (0x0A00)      16 (65535)
//   Tcap       > 2ms     2000 (0x7D0)      20000 (0x4E20)      16 (65535)  Note: Assuming C=10nF, I=20uA, VBAT=4V
//   Tcyc_read    N/A       31 (0x1F)        N/A  (N/A)          5 (31)
//   Tcyc_prog    N/A      127 (0x07F)       N/A  (N/A)         16 (65535)
//   Thvcp_en     N/A     1000 (0x3E8)       N/A  (N/A)         14 (16383)
//   Tmvcp_en     N/A     1000 (0x3E8)       N/A  (N/A)         12 (4095)
//   Tsc_en       N/A     1000 (0x3E8)       N/A  (N/A)         12 (4095)

0x00     [23:19]      5'h1F      W/R     Tcyc_read "Default: ~30us"
0x00     [18:13]      6'h02      W/R     T3us      "Default: ~3us"
0x00     [12: 7]      6'h04      W/R     T5us      "Default: ~5us"
0x00     [ 6: 0]      7'h09      W/R     T10us     "Default: ~10us"

0x01     [23: 8]   16'h007F      W/R     Tcyc_prog "Default: ~128us"
0x01     [ 7: 0]      8'h09      W/R     Tprog     "Default: ~10us"

0x02     [15: 0]   16'h0100      W/R     Terase    "Default: ~256us"

0x03     [23:10]   14'h03E8      W/R     Thvcp_en  "Default: ~1ms"
0x03     [ 9: 0]    10'h031      W/R     Tben      "Default: ~50us"

0x04     [23:12]   12'h3E8       W/R     Tmvcp_en  "Default: ~1ms"
0x04     [11: 0]   12'h3E8       W/R     Tsc_en    "Default: ~1ms"

0x05     [19: 0]  20'h007CF      W/R     Tcap      "Default: ~2ms"

0x06     [16: 0]  17'h01F3F      W/R     Tvref     "Default: ~8ms"

// SRAM Start Address
0x07     [12: 0]   13'h0000      LC     SRAM_START_ADDR

// Flash Start Address
0x08     [17: 0]  18'h00000      LC     FLSH_START_ADDR

// Flash Operation (REG ADDR used in CTRL)
0x09     [18: 6]   13'h0000      LC     LENGTH
0x09     [    5]       1'h0      LC     IRQ_EN
0x09     [ 4: 1]       4'h0      LC     CMD
0x09     [    0]       1'h0      LC     GO

// Voltage/Current Limiter Control (REG ADDR used in CTRL)
//
// Power-On/Off Sequence
// VREF_SLEEP : -----------------\__________________________________________/---
// COMP_SLEEP :------------------|-> Tvref <-\______________________________/---
// COMP_CLKENB:----------------------------------\__________________________/---
// COMP_ISOL  :--------------------------------------\___________________/---
//                                                   |-> Tcap <-|

0x0A     [    4]       1'h1      W/R     VREF_SLEEP
0x0A     [    3]       1'h1      W/R     COMP_SLEEP
0x0A     [    2]       1'h1      W/R     COMP_CLKENB   ~COMP_CLKEN~
0x0A     [    1]       1'h1      W/R     COMP_ISOL
//0x0A     [    0]       1'h1      W/R     LCAP_ENB      ~LCAP_EN~

//0x0B   RESERVED

// External Streaming Configuration
0x0C     [    3]       1'h0      W/R     WRAP_EXT
0x0C     [    2]       1'h0      W/R     UPDATE_ADDR_EXT
0x0C     [ 1: 0]       2'h1      W/R     BIT_EN_EXT

0x0D     [19: 0]  20'hFFFFF      W/R     TIMEOUT_EXT    "0 means no time-limit"

// External Streaming SRAM START ADDR (REG ADDR used in CTRL)
0x0E     [12: 0]    13'h000      W/R     SRAM_START_ADDR_EXT "will be updated at the end of Ext Streaming"

// Interrupt Message Address
0x0F     [15: 8]      8'h10      W/R     INT_RPLY_SHORT_ADDR
0x0F     [ 7: 0]      8'h00      W/R     INT_RPLY_REG_ADDR

// Auto-Boot Flags (REG ADDR used in CTRL)
0x10     [   22]       1'h0      W/R     BOOT_FLAG_SLEEP
0x10     [   21]       1'h0      W/R     BOOT_FLAG_ECC_ERROR
0x10     [   20]       1'h0      W/R     BOOT_FLAG_WRONG_HEADER
0x10     [   19]       1'h0      W/R     BOOT_FLAG_PWDN
0x10     [   18]       1'h0      W/R     BOOT_FLAG_INVALID_CMND
0x10     [   17]       1'h0      W/R     BOOT_FLAG_CHKSUM_ERROR
0x10     [   16]       1'h0      W/R     BOOT_FLAG_SUCCESS
0x10     [ 1: 0]       2'h0      W/R     BOOT_REG_PATTERN

// Flash Manual Power-On (REG ADDR used in CTRL)
0x11     [    5]       1'h1      W/R     FLASH_POWER_DO_VREFCOMP
//0x11     [    4]       1'h1      W/R     FLASH_POWER_DO_LARGE_CAP // Large cap is not used in FLP.
0x11     [    3]       1'h1      W/R     FLASH_POWER_DO_FLSH
0x11     [    2]       1'h1      W/R     FLASH_POWER_IRQ_EN
0x11     [    1]       1'h1      W/R     FLASH_POWER_SEL_ON "1: Turn-On, 0: Turn-Off"
0x11     [    0]       1'h0      W/R     FLASH_POWER_GO

// Flash Auto-Power Configuration
0x12     [    6]       1'h0      W/R     IRQ_PWR_ON_WUP   "If 1, FSM will sends an IRQ when it's powering up the flash upon wake-up"
0x12     [ 5: 3]       3'h0      W/R     SEL_PWR_ON_WUP   "0: disable, 1: vclmt, 2: vclmt/lcap, 3: vclmt/flsh, 4: vclmt/flsh/lcap"
0x12     [    2]       1'h0      W/R     FLASH_AUTO_USE_CUSTOM   "If 1, Flash Auto-On/Off will use the setting in FLASH_POWER_DO_X"
0x12     [    1]       1'h0      W/R     FLASH_AUTO_OFF   "If 1, FSM will turn off Flash once finishing a GO operation or ping-pong streaming"
0x12     [    0]       1'h0      W/R     FLASH_AUTO_ON    "If 1, FSM will turn on Flash before starting a GO operation"

// Ping-Pong Streaming Configuration
0x13     [19: 1]  19'h00000      LC     PP_STR_LIMIT     "Limit the number of words streamed. 0 means no-limit."
0x13     [    0]       1'h0      LC     PP_STR_EN        "Ping-Pong Straming Enable"

0x14     [    4]       1'h0      W/R     PP_NO_ERR_DETECTION    "If 1, it does not detect buffer_overrun error. Other errors can be stil detected, though."
0x14     [    3]       1'h0      W/R     PP_USE_FAST_PROG "If 1, hold flsh_prog and flsh_nvstr during the whole page program"
0x14     [    2]       1'h0      W/R     PP_WRAP          "If 1, PP_FLSH_ADDR will wrap around"
0x14     [ 1: 0]       2'h1      W/R     PP_BIT_EN_EXT    

// Ping-Pong Streaming Flash Address (REG ADDR used in CTRL)
0x15     [17: 0]  18'h00000      W/R     PP_FLSH_ADDR

// Ping-Pong Streaming Results (REG ADDR used in CTRL)
0x16     [18: 0]  19'h00000      LC     PP_LENGTH_STREAMED "Number of words received during Ping-Pong Streaming"

// Ping-Pong Streaming Results (REG ADDR used in CTRL)
0x17     [   23]       1'h0      LC     PP_FLAG_END_OF_FLASH
0x17     [   22]       1'h0      LC     PP_FLAG_STR_LIMIT
0x17     [   21]       1'h0      LC     PP_FLAG_COPY_LIMIT
0x17     [18: 0]  19'h00000      LC     PP_LENGTH_COPIED  "Number of words copied to Flash during Ping-Pong Streaming"

// Clock Gen Tuning
0x18     [ 5: 2]       4'hC      W/R     CLK_RING_SEL
0x18     [ 1: 0]       2'h1      W/R     CLK_DIV_SEL

// Comparator Tuning
0x19     [   11]       1'h1      W/R     DISABLE_BYPASS_MIRROR
0x19     [10: 7]       4'h8      W/R     COMP_CTRL_I_1STG
0x19     [ 6: 3]       4'h0      W/R     COMP_CTRL_I_2STG_BAR
0x19     [ 2: 0]       3'h3      W/R     COMP_CTRL_VOUT

//0x1A   RESERVED

// Interrupt Payload
0x1B     [ 7: 0]      8'hXX       R      IRQ_PAYLOAD

//0x1C   RESERVED
//0x1D   RESERVED

// REG_WR_DATA (REG ADDR used in CTRL)
0x1E     [23: 0] 24'hXXXXXX       R      FLS2LC_REG_WR_DATA

// Flash CTRL Force Reset
0x1F     [    0]       1'h1      W/R     FORCE_RESETN  "If 0, FLPv3L_CTRL will be immediately reset (Asynchronous). Release of RESET does not do anything regardless of SEL_PWR_ON_WUP setting"

// Flash Tuning
0x20     [14:10]      5'h04      W/R     FLSH_SET0
0x20     [ 9: 5]      5'h04      W/R     FLSH_SET1
0x20     [ 4: 0]      5'h07      W/R     FLSH_SNT

0x21     [14:10]      5'h04      W/R     FLSH_SPT0
0x21     [ 9: 5]      5'h04      W/R     FLSH_SPT1
0x21     [ 4: 0]      5'h04      W/R     FLSH_SPT2

0x22     [ 9: 5]      5'h07      W/R     FLSH_SYT0
0x22     [ 4: 0]      5'h07      W/R     FLSH_SYT1

0x23     [19:15]      5'h01      W/R     FLSH_SRT0
0x23     [14:10]      5'h03      W/R     FLSH_SRT1
0x23     [ 9: 5]      5'h03      W/R     FLSH_SRT2
0x23     [ 4: 0]      5'h07      W/R     FLSH_SRT3

0x24     [14:10]      5'h07      W/R     FLSH_SRT4
0x24     [ 9: 5]      5'h07      W/R     FLSH_SRT5
0x24     [ 4: 0]      5'h01      W/R     FLSH_SRT6

//0x25   RESERVED

0x26     [19:16]       4'hD      W/R     FLSH_SPIG
0x26     [15:12]       4'h7      W/R     FLSH_SRIG
0x26     [11: 8]       4'h7      W/R     FLSH_SVR0
0x26     [ 7: 4]       4'h8      W/R     FLSH_SVR1
0x26     [ 3: 0]       4'h8      W/R     FLSH_SVR2

0x27     [20:16]      5'h01      W/R     FLSH_SHVE
0x27     [15:11]      5'h03      W/R     FLSH_SHVP
0x27     [10: 6]      5'h0F      W/R     FLSH_SHVCT
0x27     [ 5: 0]      6'h08      W/R     FLSH_SMV

0x28     [ 9: 5]      5'h07      W/R     FLSH_SMVCT0
0x28     [ 4: 0]      5'h07      W/R     FLSH_SMVCT1

//0x29   RESERVED

0x2A     [ 5: 0]      6'h02      W/R     FLSH_SAB

//0x2B   RESERVED

//*******************************************************************************************
// 0x30-0x33 (48-51) MEM_STR_CONF CH1
// -----------------------------------------------------------------------------------------
0x30     [23:16]      8'hF0      W/R     STR_WR_CH1_ALT_ADDR    "Alert is suppressed by default"
//0x30     [15: 0]   16'h0000      W/R     STR_WR_CH1_WR_BUF_LOWER

0x31     [23:16]      8'h00      W/R     STR_WR_CH1_ALT_REG_WR
//0x31     [15: 0]   16'h0000      W/R     STR_WR_CH1_WR_BUF_UPPER

0x32     [   23]       1'h1      W/R     STR_WR_CH1_EN          "Streaming is enabled by default"
0x32     [   22]       1'h1      W/R     STR_WR_CH1_WRP         "Wrapping is enabled by default"
0x32     [   21]       1'h0      W/R     STR_WR_CH1_DBLB        "Double Buffer is disabled by default"
0x32     [12: 0]   13'h1FFF      W/R     STR_WR_CH1_BUF_LEN     "32kB = 8192 Words = (0x1FFF + 1)"

0x33     [12: 0]   13'h0000      W/R     STR_WR_CH1_BUF_OFF

//*******************************************************************************************
// 0x34-0x37 (52-55) MEM_STR_CONF CH0
// -----------------------------------------------------------------------------------------
0x34     [23:16]      8'hF0      W/R     STR_WR_CH0_ALT_ADDR    "Alert is suppressed by default"
//0x34     [15: 0]   16'h0000      W/R     STR_WR_CH0_WR_BUF_LOWER

0x35     [23:16]      8'h00      W/R     STR_WR_CH0_ALT_REG_WR
//0x35     [15: 0]   16'h0000      W/R     STR_WR_CH0_WR_BUF_UPPER

0x36     [   23]       1'h1      W/R     STR_WR_CH0_EN          "Streaming is enabled by default"
0x36     [   22]       1'h1      W/R     STR_WR_CH0_WRP         "Wrapping is enabled by default"
0x36     [   21]       1'h0      W/R     STR_WR_CH0_DBLB        "Double Buffer is disabled by default"
0x36     [12: 0]   13'h1FFF      W/R     STR_WR_CH0_BUF_LEN     "32kB = 8192 Words = (0x1FFF + 1)"

0x37     [12: 0]   13'h0000      W/R     STR_WR_CH0_BUF_OFF

//*******************************************************************************************
// 0x3A (58) MEM_BULK_CONTROL
// -----------------------------------------------------------------------------------------
0x3A     [   23]       1'h1      W/R     BLK_WR_EN
//0x3A     [   22]       1'h0      W/R     BLK_WR_CACT
//0x3A     [19: 0]  20'h00000      W/R     BLK_WR_LENGTH_LIMIT

//*******************************************************************************************
// 0x40-0x44 (64-68) ACTION_REGISTERS
// -----------------------------------------------------------------------------------------
//0x40     [23: 0] 24'h000000      W/R     ACT_REG_00
//0x41     [23: 0] 24'h000000      W/R     ACT_REG_01
//0x42     [23: 0] 24'h000000      W/R     ACT_REG_02
//0x43     [23: 0] 24'h000000      W/R     ACT_REG_03
//0x44     [23: 0] 24'h000000      W/R     ACT_REG_04

//*******************************************************************************************
// 0x47 (71) MPQ#255 Action Register is NOT implemented yet.
// However, at least one bit should be here to correctly set layer_ctrl's behavior.
// Maybe genRF could handle this in a future update.
// -----------------------------------------------------------------------------------------
0x47     [   23]       1'h0      W/R     ACT_RST
//0x47     [   19]       1'h0      W/R     ACT_RSTR
//0x47     [   18]       1'h0      W/R     ACT_RSTB
//0x47     [   17]       1'h0      W/R     ACT_RSTS
//0x47     [    8]       1'h0      W/R     ACT_INTO
//
