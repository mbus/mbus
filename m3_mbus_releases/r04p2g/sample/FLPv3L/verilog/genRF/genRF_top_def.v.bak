`ifndef FLPv3L
//----------------------------------------------
`define FLPv3L
`define SD #1

//**********************************************
// MBus Node
//**********************************************

//-- Node Full Prefix
`define FLPv3L_MBUS_FULL_PREFIX 20'h12303


//**********************************************
// Layer Controller
//**********************************************

//-- Only three configurations are supported
//-- 1. Both INT and MEM are enabled
//-- 2. Only INT is enabled
//-- 3. Both are disabled
`define FLPv3L_LAYERCTRL_INT_ENABLE
`define FLPv3L_LAYERCTRL_MEM_ENABLE

//-- Interrupt Depth (Number of Interrupts)
//-- VALID only when FLPv3L_LAYERCTRL_INT_ENABLE is defined
`define FLPv3L_LAYERCTRL_INT_DEPTH 1

//-- "Number of Bits in Memory Address Input + 2"
//-- VALID only when FLPv3L_LAYERCTRL_MEM_ENABLE is defined
`define FLPv3L_LAYERCTRL_MEM_ADDR_WIDTH 32

//-- Number of Data I/O in memory
//-- VALID only when FLPv3L_LAYERCTRL_MEM_ENABLE is defined
`define FLPv3L_LAYERCTRL_MEM_DATA_WIDTH 32

//-- Number of Memory Streaming Channels
//-- VALID only when FLPv3L_LAYERCTRL_MEM_ENABLE is defined
`define FLPv3L_LAYERCTRL_MEM_STREAM_CHANNELS 2

//-- Define FLPv3L_LAYERCTRL_MEM_USE_SAME_CLOCK 
//-- if layer controller and the memory reside in the same clock domain
`define FLPv3L_LAYERCTRL_MEM_USE_SAME_CLOCK

//-- Define FLPv3L_LAYERCTRL_ARB_SUPPORT to add a few more outputs
//-- to be used in Arbitrator (generally in PRC/PRE layers)
//`define FLPv3L_LAYERCTRL_ARB_SUPPORT

//-- Provide list of MBus RF Size and IDs that are read-only or empty.
//-- Do NOT remove/modify comment lines starting with '//---- genRF' below.
//-- It is recommended to use m3_genRF to update these settings.
//---- genRF Beginning of Compiler Directives ----//
`define FLPv3L_MBUS_RF_SIZE      72
`define FLPv3L_MBUS_RF_READ_ONLY ((i==27)|(i==30))
`define FLPv3L_MBUS_RF_EMPTY     ((i==11)|(i==26)|(i==28)|(i==29)|(i==37)|(i==41)|(i==43)|(i==44)|(i==45)|(i==46)|(i==47)|(i==56)|(i==57)|(i==59)|(i==60)|(i==61)|(i==62)|(i==63)|(i==64)|(i==65)|(i==66)|(i==67)|(i==68)|(i==69)|(i==70))
//---- genRF End of Compiler Directives ----//

//**********************************************
// FLPv3L Configurations
//**********************************************

    //**********************************************
    // MBus RF Hard-Wires
    //**********************************************
    `define MBUS_RF_HW_SRAM_TSEL                2'h1
    `define MBUS_RF_HW_FLSH_HV_MODE             2'h0
    `define MBUS_RF_HW_FLSH_MV_MODE             2'h0
    `define MBUS_RF_HW_FLSH_SSCHT0              5'h0F
    `define MBUS_RF_HW_FLSH_SSCHT1              5'h0F
    `define MBUS_RF_HW_FLSH_SSCHT2              5'h0F
    `define MBUS_RF_HW_FLSH_SSCH                5'h04
    `define MBUS_RF_HW_FLSH_SSCL                5'h07
    `define MBUS_RF_HW_FLSH_VREF_EXT_EN         1'h0

    //**********************************************
    // BIT WIDTHS
    //**********************************************
    `define OP_DATA_WIDTH       32
    `define OP_ECC_EFF_WIDTH    26
    `define OP_TIMEPAR_WIDTH    20
    
    //**********************************************
    // VERSION PRESETS
    // NOTE: SRAM parameters are sums of the two SRAM macros
    //**********************************************
    
    // Large Version (SVT)
    `ifdef FLPv3L
        // 8Mb (1MB), 8-bit I/O, 1kB Page, Total 1024 Pages, 1024k Words, 128:1 Y-MUX, 1024 Words/Page
        // Note: X[12:9] is converted to one-hot Bank Enable (BEN[15:0])
        // Address: (X[12], X[11], X[10], X[9], ..., X[7], X[6], X[5], X[4], X[3]), (X[2], X[1], X[0], Y[6], ..., Y[2], Y[1], Y[0])
        // addr_cnt:                                   12    11    10    9     8       7     6     5     4          0
    
        `define SRAM_MODULE_NAME    TS1GE4096X32M8
        `define SRAM_ADDR_WIDTH     13
    
        `define FLASH_MODULE_NAME   QDN90LP1024KX8M128P8v2
        `define FLASH_ADDR_WIDTH    20
        `define FLASH_ADDR_X_WIDTH  13
        `define FLASH_NUM_BANKS     16
        `define FLASH_BEN_WIDTH     4  // log2(FLASH_NUM_BANKS)
        `define FLASH_NUM_PAGE_WIDTH 10
        `define FLASH_NUM_PAGES     1024
    
        `define OP_FLASH_ADDR_WIDTH 18
        `define OP_ADDR_X_WIDTH     8   // X-address width in SRAM_ADDR_WIDTH
        `define NUM_PAGES_PER_BANK  16
        `define NUM_PAGES_PER_BANK_WIDTH  4 // log2(NUM_PAGES_PER_BANK)
    
    // Small Version (SVT)
    `elsif FLPv3S
        // 1Mb (128kB), 8-bit I/O, 1kB Page, Total 128 Pages, 128k Words, 128:1 Y-MUX, 1024 Words/Page
        // Note: X[9] is converted to one-hot Bank Enable (BEN[1:0])
        // Address: (X[9], ..., X[5], X[4], X[3]), (X[2], X[1], X[0], Y[6], ..., Y[2], Y[1], Y[0])
        // addr_cnt:              10    9     8       7     6     5     4          0
    
        `define SRAM_MODULE_NAME    TS1GE1024X32M4
        `define SRAM_ADDR_WIDTH     11
    
        `define FLASH_MODULE_NAME   QDN90LP128KX8M128P8v2
        `define FLASH_ADDR_WIDTH    17
        `define FLASH_ADDR_X_WIDTH  10
        `define FLASH_NUM_BANKS     2
        `define FLASH_BEN_WIDTH     1  // log2(FLASH_NUM_BANKS)
        `define FLASH_NUM_PAGE_WIDTH 7
        `define FLASH_NUM_PAGES     128
    
        `define OP_FLASH_ADDR_WIDTH 15
        `define OP_ADDR_X_WIDTH     6   // X-address width in SRAM_ADDR_WIDTH
        `define NUM_PAGES_PER_BANK  4
        `define NUM_PAGES_PER_BANK_WIDTH  2 // log2(NUM_PAGES_PER_BANK)
    
    `endif
    
    `define SRAM_DATA_WIDTH     32
    `define FLASH_ADDR_Y_WIDTH  7
    `define FLASH_DATA_WIDTH    8
    `define OP_PAGE_WIDTH       8  // Number of 32-bit words in a Page
    `define OP_LENGTH_WIDTH     `SRAM_ADDR_WIDTH     // Number of 32-bit words in SRAM
    `define OPCOND_END           (addr_cnt[`OP_LENGTH_WIDTH-1:0] == LENGTH)
    `define OPCOND_EXT           (~(addr_cnt[`SRAM_ADDR_WIDTH-1:0] < LENGTH))
    `define OP_COUNTER_INC      1
    `define OP_EXT_DATA_WIDTH   32
    `define OP_EXT_CNT_WIDTH    5
    `define OP_EXT_SRAM_ADDR_0    addr_cnt[`SRAM_ADDR_WIDTH-1:0]
    `define PP_EXT_SRAM_ADDR_0    pp_sram_addr_cnt[`SRAM_ADDR_WIDTH-1:0]
    `define PPCOND_EXT          ((PP_STR_LIMIT != 0) & (pp_sram_addr_cnt == PP_STR_LIMIT))
    `define LENGTH_EXT_WIDTH    `SRAM_ADDR_WIDTH
    `define OP_FLASH_PAGE_WIDTH (`OP_PAGE_WIDTH + 1) // PAGE_ADDR_SIZE = 1 << (`FLASH_PAGE_WIDTH - 1)
    `define OP_FLASH_PAGE_LENGTH {`OP_PAGE_WIDTH{1'b1}}
    `define OP_BANK_WIDTH       (`SRAM_ADDR_WIDTH-1)
    `define OP_NEXT_FLSH_RD_YADR {boot_addr_ptn[`FLASH_ADDR_Y_WIDTH-3:0], 2'b00}
    
    //**********************************************
    // PING-PONG STREAMING
    //**********************************************
    `define PP_COUNTER_WIDTH    (`OP_FLASH_ADDR_WIDTH + 1)
    `define PPCOND_05US (pp_time_par_cnt[5:0]  ==      T5us)
    `define PPCOND_10US (pp_time_par_cnt[6:0]  ==     T10us)
    `define PPCOND_TBEN (pp_time_par_cnt[9:0]  ==      Tben)
    `define PPCOND_PROG (pp_time_par_cnt[7:0]  ==     Tprog)
    `define PPCOND_CYCP (pp_time_par_cnt[19:0] == Tcyc_prog)
    `define PPCOND_END  (pp_flsh_addr_cnt[`OP_LENGTH_WIDTH-1:0] == pp_length)
    `define PP_MBUS_NOT_BUSY (pp_is_ext_str | (pp_is_mbus_str & end_of_pp_str_msg))
    
    //**********************************************
    // CONDITIONS
    //**********************************************
    `define TPCOND_03US (time_par_cnt[5:0]  ==      T3us)
    `define TPCOND_05US (time_par_cnt[5:0]  ==      T5us)
    `define TPCOND_10US (time_par_cnt[6:0]  ==     T10us)
    `define TPCOND_TBEN (time_par_cnt[9:0]  ==      Tben)
    `define TPCOND_HVEN (time_par_cnt[13:0] ==  Thvcp_en)
    `define TPCOND_MVEN (time_par_cnt[11:0] ==  Tmvcp_en)
    `define TPCOND_SCEN (time_par_cnt[11:0] ==    Tsc_en)
    `define TPCOND_PROG (time_par_cnt[7:0]  ==     Tprog)
    `define TPCOND_ERAS (time_par_cnt[15:0] ==    Terase)
    `define TPCOND_CYCR (time_par_cnt[4:0]  == Tcyc_read)
    `define TPCOND_CYCP (time_par_cnt[15:0] == Tcyc_prog)
    `define TPCOND_TVRF (time_par_cnt[16:0] ==     Tvref)
    `define TPCOND_TCON (time_par_cnt[19:0] ==      Tcap)
    `define TPCOND_FULL (time_par_cnt[19:0] == {`OP_TIMEPAR_WIDTH{1'b1}})
    
    //**********************************************
    // GO COMMAND
    //**********************************************
    `define CP_FLSH2SRAM      4'h1
    `define CP_SRAM2FLSH      4'h2
    `define CP_SRAM2FLSH_FAST 4'h3
    `define ER_FLSH           4'h4
    //`define MER_FLSH          4'h5 // Not available in FLP.
    `define EXT_WR_SRAM       4'h6
    `define REF_ER_FLSH       4'h7
    `define START_BOOT        4'h8
    `define MEAS_CLK_FREQ     4'h9
    
    //**********************************************
    // RESERVED MBUS MESSAGES
    //**********************************************
    //SLEEP
    `define MEM_ADDR_SLEEP    30'h3FFFFFFF
    `define MBUS_ADDR_SLEEP   8'h1
    `define MBUS_DATA_SLEEP   32'h00000000
    //ENUMERATE NODE (SHORT ADDR GIVEN BY FSM)
    `define MEM_ADDR_ENUM     30'h3FFFFFFE
    `define MBUS_ADDR_ENUM    8'h0
    `define MBUS_DATA_ENUM    32'h20000000
    
    //**********************************************
    // AUTO BOOT-UP
    //**********************************************
    //Boot Register Value
    `define REG_BOOT_PATTERN_SET 2'h3
    `define BOOT_HEADER          32'h6AB0C3CB
    //Boot-Up Control Bit
    `define BTCT_CMND    4'h1
    `define BTCT_TAIL    4'hF
    //Boot-Up Prog Op Code
    `define BTOP_TAIL    4'h0
    `define BTOP_REG_WR  4'h1
    `define BTOP_MEM_WR  4'h2
    `define BTOP_MBUS    4'h3
    `define BTOP_SLP     4'hC
    `define BTOP_NOP     4'hD
    `define BTOP_ENUM    4'hE
    `define BTOP_PWDN    4'hF
    
    //**********************************************
    // POWER-ON UPON WAKE-UP
    //**********************************************
    `define PWR_ON_WUP_VCLMT           3'h1
    `define PWR_ON_WUP_VCLMT_LCAP      3'h2
    `define PWR_ON_WUP_VCLMT_FLSH      3'h3
    `define PWR_ON_WUP_VCLMT_FLSH_LCAP 3'h4
    
    //**********************************************
    // REGISTER IDs 
    // When genRF.conf is updated, make sure you
    // keep this section also up-to-date
    //**********************************************
    `define REGID_TCYR     8'h00
    `define REGID_TCYP     8'h01
    `define REGID_TERA     8'h02
    `define REGID_TBEN     8'h03
    `define REGID_TMVS     8'h04
    `define REGID_TCAP     8'h05
    `define REGID_TVRF     8'h06
    `define REGID_SADR     8'h07
    `define REGID_FADR     8'h08
    `define REGID_GO       8'h09
    `define REGID_COMP     8'h0A
    `define REGID_CNFEXT   8'h0C
    `define REGID_TMOUTEXT 8'h0D
    `define REGID_SADREXT  8'h0E
    `define REGID_BTFLAG   8'h10
    `define REGID_PWRGO    8'h11
    `define REGID_FPWRCNF  8'h12
    `define REGID_PPGO     8'h13
    `define REGID_PPCONF   8'h14
    `define REGID_PPFADR   8'h15
    `define REGID_PPLSTR   8'h16
    `define REGID_PPLCOP   8'h17
    `define REGID_VCTUNE   8'h19
    `define REGID_IRQPYLD  8'h1B
    `define REGID_REGWR    8'h1E
    `define REGID_CH1OFF   8'h33
    `define REGID_CH0OFF   8'h37
    
    //**********************************************
    // Layer Controller Interrupt
    //**********************************************
    // IRQ Types
    `define IRQ_GEN_DEFAULT       3'h0
    `define IRQ_GEN_RF_WRITE      3'h1
    `define IRQ_GEN_RF_READ       3'h2
    `define IRQ_GEN_MEM_READ_BULK 3'h3
    `define IRQ_GEN_MEM_READ_STR  3'h4
    `define IRQ_GEN_RF_WRITE_3    3'h5
    // Address to send BT_FLAG message { MBus_Target_Addr, Register_Addr }
    `define TX_BOOT_FLAG_ADDR         16'h1007
    `define BT_MAX_COMP_CTRL_I_1STG    4'hE
    // IRQ Commands
    `define IRQ_CMD_RESET_FLASH_POWER_GO       {`REGID_PWRGO, 18'b0, FLASH_PWR_DO_VREFCOMP, 1'b0, FLASH_PWR_DO_FLSH, FLASH_PWR_IRQ_EN, FLASH_PWR_SEL_ON, 1'b0, 64'b0}
    `define IRQ_CMD_RESET_GO                   {`REGID_GO, {(24-`OP_LENGTH_WIDTH-6){1'b0}}, LENGTH, IRQ_EN, CMD, 1'b0, 64'b0}
    `define IRQ_CMD_BT_REG_WRITE               {bt_reg_addr, bt_reg_data, 64'b0}
    `define IRQ_CMD_BT_REG_READ                {`REGID_REGWR, 8'h0, bt_short_prefix, `LAYERCTRL_CMD_RF_WRITE, bt_reg_addr, 64'b0}
    `define IRQ_CMD_BT_MEM_READ                {bt_short_prefix, `LAYERCTRL_CMD_MEM_WRITE, 4'h0, 2'h0, bt_mem_length_1, 32'h0, bt_mem_addr}
    `define IRQ_CMD_BT_ENUM                    {`MBUS_ADDR_ENUM,  4'h0, 20'h0, `MEM_ADDR_ENUM,  2'h0, 32'h0}
    `define IRQ_CMD_BT_SLEEP                   {`MBUS_ADDR_SLEEP, 4'h0, 20'h0, `MEM_ADDR_SLEEP, 2'h0, 32'h0}
    `define IRQ_CMD_SET_BOOT_REG_PATTERN       {`REGID_BTFLAG, 22'h0, `REG_BOOT_PATTERN_SET, 64'b0}
    `define IRQ_CMD_SET_BOOT_FLAG_SUCCESS      {`REGID_BTFLAG, 1'b0, 7'b0000001, 14'h0, `REG_BOOT_PATTERN_SET, 64'b0}
    `define IRQ_CMD_SET_BOOT_FLAG_PWDN         {`REGID_BTFLAG, 1'b0, 7'b0001001, 14'h0, `REG_BOOT_PATTERN_SET, 64'b0}
    `define IRQ_CMD_SET_BOOT_FLAG_SLEEP        {`REGID_BTFLAG, 1'b0, 7'b1000001, 14'h0, `REG_BOOT_PATTERN_SET, 64'b0}
    `define IRQ_CMD_SET_BOOT_FLAG_CHKSUM_ERROR {`REGID_BTFLAG, 1'b0, 7'b0000010, 14'h0, `REG_BOOT_PATTERN_SET, 64'b0}
    `define IRQ_CMD_SET_BOOT_FLAG_INVALID_CMND {`REGID_BTFLAG, 1'b0, 7'b0000100, 14'h0, `REG_BOOT_PATTERN_SET, 64'b0}
    `define IRQ_CMD_SET_BOOT_FLAG_WRONG_HEADER {`REGID_BTFLAG, 1'b0, 7'b0010000, 14'h0, `REG_BOOT_PATTERN_SET, 64'b0}
    `define IRQ_CMD_SET_BOOT_FLAG_ECC_ERROR    {`REGID_BTFLAG, 1'b0, 7'b0100000, 14'h0, `REG_BOOT_PATTERN_SET, 64'b0}
    `define IRQ_CMD_TX_BOOT_FLAG               {`REGID_BTFLAG, 8'h0, `TX_BOOT_FLAG_ADDR, 64'b0}
    `define IRQ_CMD_INCREMENT_COMP_CTRL_I_1STG {`REGID_VCTUNE, 12'h0, disable_bypass_mirror, comp_ctrl_i_1stg_plus_1, comp_ctrl_i_2stg_bar, comp_ctrl_vout, 64'h0}
    `define IRQ_CMD_POWER_ON_VREF              {`REGID_COMP, 19'h0, 1'b0, REG_COMP[3:0], 64'b0}
    `define IRQ_CMD_POWER_ON_COMP              {`REGID_COMP, 19'h0, REG_COMP[4], 1'b0, REG_COMP[2:0], 64'b0}
    `define IRQ_CMD_ENABLE_COMP_CLK            {`REGID_COMP, 19'h0, REG_COMP[4:3], 1'b0, REG_COMP[1:0], 64'b0}
    `define IRQ_CMD_RELEASE_COMP_ISOL          {`REGID_COMP, 19'h0, REG_COMP[4:2], 1'b0, REG_COMP[0], 64'b0}
    `define IRQ_CMD_TURN_OFF_VREF              {`REGID_COMP, 19'h0, 1'h1, REG_COMP[3:0], 64'b0}
    `define IRQ_CMD_TURN_OFF_COMP              {`REGID_COMP, 19'h0, REG_COMP[4], 3'h7, REG_COMP[0], 64'b0}
    `define IRQ_CMD_UPDATE_SRAM_ADDR_EXT       {`REGID_SADREXT, {(24-`SRAM_ADDR_WIDTH){1'b0}}, addr_cnt, 64'b0}
    `define IRQ_CMD_SET_PP_STR_EN              {`REGID_PPGO, {(24-`PP_COUNTER_WIDTH-1){1'b0}}, PP_STR_LIMIT, 1'b1, 64'b0}
    `define IRQ_CMD_UPDATE_PP_RESULT           {`REGID_PPFADR, {(24-`OP_FLASH_ADDR_WIDTH){1'b0}}, pp_flsh_start_addr, `REGID_PPLSTR, {(24-`OP_FLASH_ADDR_WIDTH-1){1'b0}}, pp_num_streamed, `REGID_PPLCOP, pp_end_of_flash_no_wrap, pp_str_limit, pp_copy_limit, {(24-`OP_FLASH_ADDR_WIDTH-4){1'b0}}, pp_num_copied}
    
    //**********************************************
    // STATE ASSIGNMENTS
    //**********************************************
    `define STATE_WIDTH  8
    
    `define IDLE            8'h00
    `define IRQ_GEN_0       8'h01
    `define IRQ_GEN_1       8'h02
    `define IRQ_GEN_2       8'h03
    `define RESET_GO_0      8'h04
    `define RESET_GO_1      8'h05
    `define RESET_GO_2      8'h06
    `define RESET_GO_3      8'h07
    `define MEAS_CLK_FREQ_0 8'h08
    
    `define WR_SRAM_0    8'h10
    `define RD_SRAM_0    8'h11
    `define RD_SRAM_1    8'h12
    `define RD_FLSH_0    8'h13
    `define RD_FLSH_1    8'h14
    `define RD_FLSH_2    8'h15
    `define RD_FLSH_3    8'h16
    `define RD_FLSH_4    8'h17
    `define RD_FLSH_5    8'h18
    `define RD_FLSH_6    8'h19
    `define RD_FLSH_7    8'h1A
    `define RD_FLSH_8    8'h1B
    `define RD_FLSH_9    8'h1C
    
    `define CP_FLSH2SRAM_0    8'h20
    `define CP_FLSH2SRAM_1    8'h21
    `define CP_FLSH2SRAM_2    8'h22
    `define CP_FLSH2SRAM_3    8'h23
    `define CP_FLSH2SRAM_4    8'h24
    `define CP_FLSH2SRAM_5    8'h25
    `define CP_FLSH2SRAM_6    8'h26
    `define CP_FLSH2SRAM_7    8'h27
    `define CP_FLSH2SRAM_8    8'h28
    `define CP_FLSH2SRAM_9    8'h29
    `define CP_FLSH2SRAM_A    8'h2A
    `define CP_FLSH2SRAM_B    8'h2B
    `define CP_FLSH2SRAM_C    8'h2C
    `define CP_FLSH2SRAM_D    8'h2D
    
    `define CP_SRAM2FLSH_0    8'h30
    `define CP_SRAM2FLSH_1    8'h31
    `define CP_SRAM2FLSH_2    8'h32
    `define CP_SRAM2FLSH_3    8'h33
    `define CP_SRAM2FLSH_4    8'h34
    `define CP_SRAM2FLSH_5    8'h35
    `define CP_SRAM2FLSH_6    8'h36
    `define CP_SRAM2FLSH_7    8'h37
    `define CP_SRAM2FLSH_8    8'h38
    `define CP_SRAM2FLSH_9    8'h39
    `define CP_SRAM2FLSH_A    8'h3A
    `define CP_SRAM2FLSH_B    8'h3B
    `define CP_SRAM2FLSH_C    8'h3C
    `define CP_SRAM2FLSH_D    8'h3D
    `define CP_SRAM2FLSH_E    8'h3E
    `define CP_SRAM2FLSH_F    8'h3F
    `define CP_SRAM2FLSH_G    8'h40
    `define CP_SRAM2FLSH_H    8'h41
    
    `define ER_FLSH_0   8'h49
    `define ER_FLSH_1   8'h4A
    `define ER_FLSH_2   8'h4B
    `define ER_FLSH_3   8'h4C
    `define ER_FLSH_4   8'h4D
    `define ER_FLSH_5   8'h4E
    `define ER_FLSH_6   8'h4F
    
    `define CP_SRAM2FLSH_FAST_0 8'h50
    `define CP_SRAM2FLSH_FAST_1 8'h51
    `define CP_SRAM2FLSH_FAST_2 8'h52
    `define CP_SRAM2FLSH_FAST_3 8'h53
    `define CP_SRAM2FLSH_FAST_4 8'h54
    `define CP_SRAM2FLSH_FAST_5 8'h55
    `define CP_SRAM2FLSH_FAST_6 8'h56
    `define CP_SRAM2FLSH_FAST_7 8'h57
    `define CP_SRAM2FLSH_FAST_8 8'h58
    `define CP_SRAM2FLSH_FAST_9 8'h59
    `define CP_SRAM2FLSH_FAST_A 8'h5A
    `define CP_SRAM2FLSH_FAST_B 8'h5B
    `define CP_SRAM2FLSH_FAST_C 8'h5C
    `define CP_SRAM2FLSH_FAST_D 8'h5D
    `define CP_SRAM2FLSH_FAST_E 8'h5E
    `define CP_SRAM2FLSH_FAST_F 8'h5F
    `define CP_SRAM2FLSH_FAST_G 8'h60
    `define CP_SRAM2FLSH_FAST_H 8'h61
    `define CP_SRAM2FLSH_FAST_I 8'h62
    
    `define REF_FLSH_0  8'h6B
    `define REF_FLSH_1  8'h6C
    `define REF_FLSH_2  8'h6D
    `define REF_FLSH_3  8'h6E
    `define REF_FLSH_4  8'h6F
    
    `define BT_0          8'h70
    `define BT_1          8'h71
    `define BT_MANUAL_0   8'h72
    `define BT_CHK_HEAD_0 8'h73
    `define BT_CHK_HEAD_1 8'h74
    `define BT_CHK_HEAD_2 8'h75
    `define BT_CHK_HEAD_3 8'h76
    `define BT_RD_FLSH_0  8'h77
    `define BT_PS_CMND_0  8'h78
    
    `define BT_REG_WR_0   8'h80
    `define BT_REG_WR_1   8'h81
    `define BT_REG_WR_2   8'h82
    `define BT_REG_WR_3   8'h83
    `define BT_REG_WR_4   8'h84
    `define BT_REG_WR_5   8'h85
    
    `define BT_MEM_WR_0   8'h90
    `define BT_MEM_WR_1   8'h91
    `define BT_MEM_WR_2   8'h92
    `define BT_MEM_WR_3   8'h93
    `define BT_MEM_WR_4   8'h94
    `define BT_MEM_WR_5   8'h95
    `define BT_MEM_WR_6   8'h96
    `define BT_MEM_WR_7   8'h97
    `define BT_MEM_WR_8   8'h98
    
    `define BT_EOP        8'hA0
    `define BT_EOP_PWDN_0 8'hA1
    `define BT_EOP_PWDN_1 8'hA2
    `define BT_EOP_SLP    8'hA3
    `define BT_ECC_ERR    8'hA4
    `define BT_CHKSUM_ERR 8'hA5
    `define BT_INVLD_CMND 8'hA6
    `define BT_WRONG_HEAD 8'hA7
    `define BT_TX_FLAG    8'hA8
    `define BT_LAST       8'hA9
    `define SLEEP         8'hAA
    `define TX_MBUS_SLEEP 8'hAB
    `define BT_ENUM_0     8'hAC
    `define BT_ENUM_1     8'hAD
    `define BT_NOP_0      8'hAE
    
    `define POWER_ON_0    8'hB0
    `define POWER_ON_1    8'hB1
    `define POWER_ON_2    8'hB2
    `define POWER_ON_3    8'hB3
    `define POWER_ON_4    8'hB4
    `define POWER_ON_5    8'hB5
    `define POWER_OFF_0   8'hB6
    `define POWER_OFF_1   8'hB7
    `define POWER_OFF_2   8'hB8
    `define POWER_OFF_3   8'hB9
    `define POWER_OFF_4   8'hBA
    `define POWER_OFF_5   8'hBB
    
    `define FLSH_VRCMP_ON_0 8'hC0
    `define FLSH_VRCMP_ON_1 8'hC1
    `define FLSH_VRCMP_ON_2 8'hC2
    `define FLSH_VRCMP_ON_3 8'hC3
    `define FLSH_VRCMP_ON_4 8'hC4
    `define FLSH_VRCMP_ON_5 8'hC5
    `define FLSH_VRCMP_ON_6 8'hC6
    `define FLSH_FLSH_ON_0  8'hC7
    `define FLSH_FLSH_ON_1  8'hC8
    `define FLSH_FLSH_ON_2  8'hC9
    `define FLSH_FLSH_ON_3  8'hCA
    `define FLSH_FLSH_ON_4  8'hCB
    
    `define FLSH_FLSH_OFF_0  8'hD0
    `define FLSH_FLSH_OFF_1  8'hD1
    `define FLSH_FLSH_OFF_2  8'hD2
    `define FLSH_FLSH_OFF_3  8'hD3
    `define FLSH_VRCMP_OFF_0 8'hD4
    `define FLSH_VRCMP_OFF_1 8'hD5
    `define FLSH_VRCMP_OFF_2 8'hD6
    
    `define PP_STR_0                  8'hE0
    `define PP_STR_1                  8'hE1
    `define PP_STR_2                  8'hE2
    `define PP_STR_EXT_STOPPED_0      8'hE3
    `define PP_STR_EXT_STOPPED_1      8'hE4
    `define PP_STR_ERR_BUF_OVERRUN_0  8'hE5
    `define PP_STR_ERR_EXT_TOO_FAST_0 8'hE6
    `define PP_STR_PWR_ON_0           8'hE7
    
    `define EXT_SRAM_0              8'hF0
    `define EXT_SRAM_1              8'hF1
    `define EXT_SRAM_2              8'hF2
    `define EXT_SRAM_3              8'hF3
    `define EXT_SRAM_TIMEOUT_0      8'hF4
    `define EXT_SRAM_TIMEOUT_1      8'hF5
    `define EXT_SRAM_TOO_FAST_0     8'hF6
    `define EXT_SRAM_TOO_FAST_1     8'hF7
    `define EXT_SRAM_SUCC_0         8'hF8
    `define EXT_SRAM_SUCC_1         8'hF9
    `define EXT_SRAM_MEMFULL_0      8'hFA
    `define EXT_SRAM_MEMFULL_1      8'hFB
    `define EXT_SRAM_SUCC_MEMFULL_0 8'hFC
    `define EXT_SRAM_SUCC_MEMFULL_1 8'hFD
    
    `define RSVD_STATE      8'hFF
        
    //***********************
    //Ping-Pong Streaming
    //***********************
    `define PP_STATE_WIDTH  3
    
    `define PP_IDLE      3'h0
    `define PP_INITIAL   3'h1
    `define PP_ON_FLSH   3'h2
    `define PP_MAIN      3'h3
    `define PP_COPY_BANK 3'h4
    `define PP_DUMMY     3'h5
    `define PP_END       3'h6
    `define PP_ERROR     3'h7
    
    `define PP_SRAM_STATE_WIDTH  3
    
    `define PP_SRAM_IDLE      3'h0
    `define PP_SRAM_WR_0      3'h1
    `define PP_EXT_SRAM_0     3'h2
    `define PP_EXT_SRAM_1     3'h3
    `define PP_EXT_SRAM_2     3'h4
    `define PP_EXT_SRAM_3     3'h5
    
    `define PP_FLSH_STATE_WIDTH   6
    
    `define PP_FLSH_IDLE      6'h3F
    
    `define PP_FLSH_CP_FAST_0 6'h00
    `define PP_FLSH_CP_FAST_1 6'h01
    `define PP_FLSH_CP_FAST_2 6'h02
    `define PP_FLSH_CP_FAST_3 6'h03
    `define PP_FLSH_CP_FAST_4 6'h04
    `define PP_FLSH_CP_FAST_5 6'h05
    `define PP_FLSH_CP_FAST_6 6'h06
    `define PP_FLSH_CP_FAST_7 6'h07
    `define PP_FLSH_CP_FAST_8 6'h08
    `define PP_FLSH_CP_FAST_9 6'h09
    `define PP_FLSH_CP_FAST_A 6'h0A
    `define PP_FLSH_CP_FAST_B 6'h0B
    `define PP_FLSH_CP_FAST_C 6'h0C
    `define PP_FLSH_CP_FAST_D 6'h0D
    `define PP_FLSH_CP_FAST_E 6'h0E
    `define PP_FLSH_CP_FAST_F 6'h0F
    `define PP_FLSH_CP_FAST_G 6'h10
    `define PP_FLSH_CP_FAST_H 6'h11
    `define PP_FLSH_CP_FAST_I 6'h12
    
    `define PP_FLSH_CP_0      6'h20
    `define PP_FLSH_CP_1      6'h21
    `define PP_FLSH_CP_2      6'h22
    `define PP_FLSH_CP_3      6'h23
    `define PP_FLSH_CP_4      6'h24
    `define PP_FLSH_CP_5      6'h25
    `define PP_FLSH_CP_6      6'h26
    `define PP_FLSH_CP_7      6'h27
    `define PP_FLSH_CP_8      6'h28
    `define PP_FLSH_CP_9      6'h29
    `define PP_FLSH_CP_A      6'h2A
    `define PP_FLSH_CP_B      6'h2B
    `define PP_FLSH_CP_C      6'h2C
    `define PP_FLSH_CP_D      6'h2D
    `define PP_FLSH_CP_E      6'h2E
    `define PP_FLSH_CP_F      6'h2F
    `define PP_FLSH_CP_G      6'h30
    
//----------------------------------------------
`endif // FLPv3L
